// Copyright Â© Portable EHR inc, 2021
// https://portableehr.com/

using System;
using System.Text.Json.Serialization;
using PortableEHRNetSDK.Converter;

namespace PortableEHRNetSDK.Model
{
    [JsonConverter(typeof(CountryEnumConverter))]
    public class CountryEnum
    {
        private CountryEnum(string value)
        {
            Value = value;
        }

        public string Value { get; }
        public static CountryEnum AD => new("AD");
        public static CountryEnum AE => new("AE");
        public static CountryEnum AF => new("AF");
        public static CountryEnum AG => new("AG");
        public static CountryEnum AI => new("AI");
        public static CountryEnum AL => new("AL");
        public static CountryEnum AM => new("AM");
        public static CountryEnum AO => new("AO");
        public static CountryEnum AQ => new("AQ");
        public static CountryEnum AR => new("AR");
        public static CountryEnum AS => new("AS");
        public static CountryEnum AT => new("AT");
        public static CountryEnum AU => new("AU");
        public static CountryEnum AW => new("AW");
        public static CountryEnum AZ => new("AZ");
        public static CountryEnum BA => new("BA");
        public static CountryEnum BB => new("BB");
        public static CountryEnum BD => new("BD");
        public static CountryEnum BE => new("BE");
        public static CountryEnum BF => new("BF");
        public static CountryEnum BG => new("BG");
        public static CountryEnum BH => new("BH");
        public static CountryEnum BI => new("BI");
        public static CountryEnum BJ => new("BJ");
        public static CountryEnum BL => new("BL");
        public static CountryEnum BM => new("BM");
        public static CountryEnum BN => new("BN");
        public static CountryEnum BO => new("BO");
        public static CountryEnum BQ => new("BQ");
        public static CountryEnum BR => new("BR");
        public static CountryEnum BS => new("BS");
        public static CountryEnum BT => new("BT");
        public static CountryEnum BV => new("BV");
        public static CountryEnum BW => new("BW");
        public static CountryEnum BY => new("BY");
        public static CountryEnum BZ => new("BZ");
        public static CountryEnum CA => new("CA");
        public static CountryEnum CC => new("CC");
        public static CountryEnum CD => new("CD");
        public static CountryEnum CF => new("CF");
        public static CountryEnum CG => new("CG");
        public static CountryEnum CH => new("CH");
        public static CountryEnum CI => new("CI");
        public static CountryEnum CK => new("CK");
        public static CountryEnum CL => new("CL");
        public static CountryEnum CM => new("CM");
        public static CountryEnum CN => new("CN");
        public static CountryEnum CO => new("CO");
        public static CountryEnum CR => new("CR");
        public static CountryEnum CU => new("CU");
        public static CountryEnum CV => new("CV");
        public static CountryEnum CW => new("CW");
        public static CountryEnum CX => new("CX");
        public static CountryEnum CY => new("CY");
        public static CountryEnum CZ => new("CZ");
        public static CountryEnum DE => new("DE");
        public static CountryEnum DJ => new("DJ");
        public static CountryEnum DK => new("DK");
        public static CountryEnum DM => new("DM");
        public static CountryEnum DO => new("DO");
        public static CountryEnum DZ => new("DZ");
        public static CountryEnum EC => new("EC");
        public static CountryEnum EE => new("EE");
        public static CountryEnum EG => new("EG");
        public static CountryEnum EH => new("EH");
        public static CountryEnum ER => new("ER");
        public static CountryEnum ES => new("ES");
        public static CountryEnum ET => new("ET");
        public static CountryEnum FI => new("FI");
        public static CountryEnum FJ => new("FJ");
        public static CountryEnum FK => new("FK");
        public static CountryEnum FM => new("FM");
        public static CountryEnum FO => new("FO");
        public static CountryEnum FR => new("FR");
        public static CountryEnum GA => new("GA");
        public static CountryEnum GB => new("GB");
        public static CountryEnum GD => new("GD");
        public static CountryEnum GE => new("GE");
        public static CountryEnum GF => new("GF");
        public static CountryEnum GG => new("GG");
        public static CountryEnum GH => new("GH");
        public static CountryEnum GI => new("GI");
        public static CountryEnum GL => new("GL");
        public static CountryEnum GM => new("GM");
        public static CountryEnum GN => new("GN");
        public static CountryEnum GP => new("GP");
        public static CountryEnum GQ => new("GQ");
        public static CountryEnum GR => new("GR");
        public static CountryEnum GS => new("GS");
        public static CountryEnum GT => new("GT");
        public static CountryEnum GU => new("GU");
        public static CountryEnum GW => new("GW");
        public static CountryEnum GY => new("GY");
        public static CountryEnum HK => new("HK");
        public static CountryEnum HM => new("HM");
        public static CountryEnum HN => new("HN");
        public static CountryEnum HR => new("HR");
        public static CountryEnum HT => new("HT");
        public static CountryEnum HU => new("HU");
        public static CountryEnum ID => new("ID");
        public static CountryEnum IE => new("IE");
        public static CountryEnum IL => new("IL");
        public static CountryEnum IM => new("IM");
        public static CountryEnum IN => new("IN");
        public static CountryEnum IO => new("IO");
        public static CountryEnum IQ => new("IQ");
        public static CountryEnum IR => new("IR");
        public static CountryEnum IS => new("IS");
        public static CountryEnum IT => new("IT");
        public static CountryEnum JE => new("JE");
        public static CountryEnum JM => new("JM");
        public static CountryEnum JO => new("JO");
        public static CountryEnum JP => new("JP");
        public static CountryEnum KE => new("KE");
        public static CountryEnum KG => new("KG");
        public static CountryEnum KH => new("KH");
        public static CountryEnum KI => new("KI");
        public static CountryEnum KM => new("KM");
        public static CountryEnum KN => new("KN");
        public static CountryEnum KP => new("KP");
        public static CountryEnum KR => new("KR");
        public static CountryEnum KW => new("KW");
        public static CountryEnum KY => new("KY");
        public static CountryEnum KZ => new("KZ");
        public static CountryEnum LA => new("LA");
        public static CountryEnum LB => new("LB");
        public static CountryEnum LC => new("LC");
        public static CountryEnum LI => new("LI");
        public static CountryEnum LK => new("LK");
        public static CountryEnum LR => new("LR");
        public static CountryEnum LS => new("LS");
        public static CountryEnum LT => new("LT");
        public static CountryEnum LU => new("LU");
        public static CountryEnum LV => new("LV");
        public static CountryEnum LY => new("LY");
        public static CountryEnum MA => new("MA");
        public static CountryEnum MC => new("MC");
        public static CountryEnum MD => new("MD");
        public static CountryEnum ME => new("ME");
        public static CountryEnum MF => new("MF");
        public static CountryEnum MG => new("MG");
        public static CountryEnum MH => new("MH");
        public static CountryEnum MK => new("MK");
        public static CountryEnum ML => new("ML");
        public static CountryEnum MM => new("MM");
        public static CountryEnum MN => new("MN");
        public static CountryEnum MO => new("MO");
        public static CountryEnum MP => new("MP");
        public static CountryEnum MQ => new("MQ");
        public static CountryEnum MR => new("MR");
        public static CountryEnum MS => new("MS");
        public static CountryEnum MT => new("MT");
        public static CountryEnum MU => new("MU");
        public static CountryEnum MV => new("MV");
        public static CountryEnum MW => new("MW");
        public static CountryEnum MX => new("MX");
        public static CountryEnum MY => new("MY");
        public static CountryEnum MZ => new("MZ");
        public static CountryEnum NA => new("NA");
        public static CountryEnum NC => new("NC");
        public static CountryEnum NE => new("NE");
        public static CountryEnum NF => new("NF");
        public static CountryEnum NG => new("NG");
        public static CountryEnum NI => new("NI");
        public static CountryEnum NL => new("NL");
        public static CountryEnum NO => new("NO");
        public static CountryEnum NP => new("NP");
        public static CountryEnum NR => new("NR");
        public static CountryEnum NU => new("NU");
        public static CountryEnum NZ => new("NZ");
        public static CountryEnum OM => new("OM");
        public static CountryEnum PA => new("PA");
        public static CountryEnum PE => new("PE");
        public static CountryEnum PF => new("PF");
        public static CountryEnum PG => new("PG");
        public static CountryEnum PH => new("PH");
        public static CountryEnum PK => new("PK");
        public static CountryEnum PL => new("PL");
        public static CountryEnum PM => new("PM");
        public static CountryEnum PN => new("PN");
        public static CountryEnum PR => new("PR");
        public static CountryEnum PS => new("PS");
        public static CountryEnum PT => new("PT");
        public static CountryEnum PW => new("PW");
        public static CountryEnum PY => new("PY");
        public static CountryEnum QA => new("QA");
        public static CountryEnum RE => new("RE");
        public static CountryEnum RO => new("RO");
        public static CountryEnum RS => new("RS");
        public static CountryEnum RU => new("RU");
        public static CountryEnum RW => new("RW");
        public static CountryEnum SA => new("SA");
        public static CountryEnum SB => new("SB");
        public static CountryEnum SC => new("SC");
        public static CountryEnum SD => new("SD");
        public static CountryEnum SE => new("SE");
        public static CountryEnum SG => new("SG");
        public static CountryEnum SH => new("SH");
        public static CountryEnum SI => new("SI");
        public static CountryEnum SJ => new("SJ");
        public static CountryEnum SK => new("SK");
        public static CountryEnum SL => new("SL");
        public static CountryEnum SM => new("SM");
        public static CountryEnum SN => new("SN");
        public static CountryEnum SO => new("SO");
        public static CountryEnum SR => new("SR");
        public static CountryEnum SS => new("SS");
        public static CountryEnum ST => new("ST");
        public static CountryEnum SV => new("SV");
        public static CountryEnum SX => new("SX");
        public static CountryEnum SY => new("SY");
        public static CountryEnum SZ => new("SZ");
        public static CountryEnum TC => new("TC");
        public static CountryEnum TD => new("TD");
        public static CountryEnum TF => new("TF");
        public static CountryEnum TG => new("TG");
        public static CountryEnum TH => new("TH");
        public static CountryEnum TJ => new("TJ");
        public static CountryEnum TK => new("TK");
        public static CountryEnum TL => new("TL");
        public static CountryEnum TM => new("TM");
        public static CountryEnum TN => new("TN");
        public static CountryEnum TO => new("TO");
        public static CountryEnum TR => new("TR");
        public static CountryEnum TT => new("TT");
        public static CountryEnum TV => new("TV");
        public static CountryEnum TW => new("TW");
        public static CountryEnum TZ => new("TZ");
        public static CountryEnum UA => new("UA");
        public static CountryEnum UG => new("UG");
        public static CountryEnum UM => new("UM");
        public static CountryEnum US => new("US");
        public static CountryEnum UY => new("UY");
        public static CountryEnum UZ => new("UZ");
        public static CountryEnum VA => new("VA");
        public static CountryEnum VC => new("VC");
        public static CountryEnum VE => new("VE");
        public static CountryEnum VG => new("VG");
        public static CountryEnum VI => new("VI");
        public static CountryEnum VN => new("VN");
        public static CountryEnum VU => new("VU");
        public static CountryEnum WF => new("WF");
        public static CountryEnum WS => new("WS");
        public static CountryEnum YE => new("YE");
        public static CountryEnum YT => new("YT");
        public static CountryEnum ZA => new("ZA");
        public static CountryEnum ZM => new("ZM");
        public static CountryEnum ZW => new("ZW");

        public static CountryEnum GetFromValue(string Value)
        {
            if (AD.Value == Value) return AD;
            if (AE.Value == Value) return AE;
            if (AF.Value == Value) return AF;
            if (AG.Value == Value) return AG;
            if (AI.Value == Value) return AI;
            if (AL.Value == Value) return AL;
            if (AM.Value == Value) return AM;
            if (AO.Value == Value) return AO;
            if (AQ.Value == Value) return AQ;
            if (AR.Value == Value) return AR;
            if (AS.Value == Value) return AS;
            if (AT.Value == Value) return AT;
            if (AU.Value == Value) return AU;
            if (AW.Value == Value) return AW;
            if (AZ.Value == Value) return AZ;
            if (BA.Value == Value) return BA;
            if (BB.Value == Value) return BB;
            if (BD.Value == Value) return BD;
            if (BE.Value == Value) return BE;
            if (BF.Value == Value) return BF;
            if (BG.Value == Value) return BG;
            if (BH.Value == Value) return BH;
            if (BI.Value == Value) return BI;
            if (BJ.Value == Value) return BJ;
            if (BL.Value == Value) return BL;
            if (BM.Value == Value) return BM;
            if (BN.Value == Value) return BN;
            if (BO.Value == Value) return BO;
            if (BQ.Value == Value) return BQ;
            if (BR.Value == Value) return BR;
            if (BS.Value == Value) return BS;
            if (BT.Value == Value) return BT;
            if (BV.Value == Value) return BV;
            if (BW.Value == Value) return BW;
            if (BY.Value == Value) return BY;
            if (BZ.Value == Value) return BZ;
            if (CA.Value == Value) return CA;
            if (CC.Value == Value) return CC;
            if (CD.Value == Value) return CD;
            if (CF.Value == Value) return CF;
            if (CG.Value == Value) return CG;
            if (CH.Value == Value) return CH;
            if (CI.Value == Value) return CI;
            if (CK.Value == Value) return CK;
            if (CL.Value == Value) return CL;
            if (CM.Value == Value) return CM;
            if (CN.Value == Value) return CN;
            if (CO.Value == Value) return CO;
            if (CR.Value == Value) return CR;
            if (CU.Value == Value) return CU;
            if (CV.Value == Value) return CV;
            if (CW.Value == Value) return CW;
            if (CX.Value == Value) return CX;
            if (CY.Value == Value) return CY;
            if (CZ.Value == Value) return CZ;
            if (DE.Value == Value) return DE;
            if (DJ.Value == Value) return DJ;
            if (DK.Value == Value) return DK;
            if (DM.Value == Value) return DM;
            if (DO.Value == Value) return DO;
            if (DZ.Value == Value) return DZ;
            if (EC.Value == Value) return EC;
            if (EE.Value == Value) return EE;
            if (EG.Value == Value) return EG;
            if (EH.Value == Value) return EH;
            if (ER.Value == Value) return ER;
            if (ES.Value == Value) return ES;
            if (ET.Value == Value) return ET;
            if (FI.Value == Value) return FI;
            if (FJ.Value == Value) return FJ;
            if (FK.Value == Value) return FK;
            if (FM.Value == Value) return FM;
            if (FO.Value == Value) return FO;
            if (FR.Value == Value) return FR;
            if (GA.Value == Value) return GA;
            if (GB.Value == Value) return GB;
            if (GD.Value == Value) return GD;
            if (GE.Value == Value) return GE;
            if (GF.Value == Value) return GF;
            if (GG.Value == Value) return GG;
            if (GH.Value == Value) return GH;
            if (GI.Value == Value) return GI;
            if (GL.Value == Value) return GL;
            if (GM.Value == Value) return GM;
            if (GN.Value == Value) return GN;
            if (GP.Value == Value) return GP;
            if (GQ.Value == Value) return GQ;
            if (GR.Value == Value) return GR;
            if (GS.Value == Value) return GS;
            if (GT.Value == Value) return GT;
            if (GU.Value == Value) return GU;
            if (GW.Value == Value) return GW;
            if (GY.Value == Value) return GY;
            if (HK.Value == Value) return HK;
            if (HM.Value == Value) return HM;
            if (HN.Value == Value) return HN;
            if (HR.Value == Value) return HR;
            if (HT.Value == Value) return HT;
            if (HU.Value == Value) return HU;
            if (ID.Value == Value) return ID;
            if (IE.Value == Value) return IE;
            if (IL.Value == Value) return IL;
            if (IM.Value == Value) return IM;
            if (IN.Value == Value) return IN;
            if (IO.Value == Value) return IO;
            if (IQ.Value == Value) return IQ;
            if (IR.Value == Value) return IR;
            if (IS.Value == Value) return IS;
            if (IT.Value == Value) return IT;
            if (JE.Value == Value) return JE;
            if (JM.Value == Value) return JM;
            if (JO.Value == Value) return JO;
            if (JP.Value == Value) return JP;
            if (KE.Value == Value) return KE;
            if (KG.Value == Value) return KG;
            if (KH.Value == Value) return KH;
            if (KI.Value == Value) return KI;
            if (KM.Value == Value) return KM;
            if (KN.Value == Value) return KN;
            if (KP.Value == Value) return KP;
            if (KR.Value == Value) return KR;
            if (KW.Value == Value) return KW;
            if (KY.Value == Value) return KY;
            if (KZ.Value == Value) return KZ;
            if (LA.Value == Value) return LA;
            if (LB.Value == Value) return LB;
            if (LC.Value == Value) return LC;
            if (LI.Value == Value) return LI;
            if (LK.Value == Value) return LK;
            if (LR.Value == Value) return LR;
            if (LS.Value == Value) return LS;
            if (LT.Value == Value) return LT;
            if (LU.Value == Value) return LU;
            if (LV.Value == Value) return LV;
            if (LY.Value == Value) return LY;
            if (MA.Value == Value) return MA;
            if (MC.Value == Value) return MC;
            if (MD.Value == Value) return MD;
            if (ME.Value == Value) return ME;
            if (MF.Value == Value) return MF;
            if (MG.Value == Value) return MG;
            if (MH.Value == Value) return MH;
            if (MK.Value == Value) return MK;
            if (ML.Value == Value) return ML;
            if (MM.Value == Value) return MM;
            if (MN.Value == Value) return MN;
            if (MO.Value == Value) return MO;
            if (MP.Value == Value) return MP;
            if (MQ.Value == Value) return MQ;
            if (MR.Value == Value) return MR;
            if (MS.Value == Value) return MS;
            if (MT.Value == Value) return MT;
            if (MU.Value == Value) return MU;
            if (MV.Value == Value) return MV;
            if (MW.Value == Value) return MW;
            if (MX.Value == Value) return MX;
            if (MY.Value == Value) return MY;
            if (MZ.Value == Value) return MZ;
            if (NA.Value == Value) return NA;
            if (NC.Value == Value) return NC;
            if (NE.Value == Value) return NE;
            if (NF.Value == Value) return NF;
            if (NG.Value == Value) return NG;
            if (NI.Value == Value) return NI;
            if (NL.Value == Value) return NL;
            if (NO.Value == Value) return NO;
            if (NP.Value == Value) return NP;
            if (NR.Value == Value) return NR;
            if (NU.Value == Value) return NU;
            if (NZ.Value == Value) return NZ;
            if (OM.Value == Value) return OM;
            if (PA.Value == Value) return PA;
            if (PE.Value == Value) return PE;
            if (PF.Value == Value) return PF;
            if (PG.Value == Value) return PG;
            if (PH.Value == Value) return PH;
            if (PK.Value == Value) return PK;
            if (PL.Value == Value) return PL;
            if (PM.Value == Value) return PM;
            if (PN.Value == Value) return PN;
            if (PR.Value == Value) return PR;
            if (PS.Value == Value) return PS;
            if (PT.Value == Value) return PT;
            if (PW.Value == Value) return PW;
            if (PY.Value == Value) return PY;
            if (QA.Value == Value) return QA;
            if (RE.Value == Value) return RE;
            if (RO.Value == Value) return RO;
            if (RS.Value == Value) return RS;
            if (RU.Value == Value) return RU;
            if (RW.Value == Value) return RW;
            if (SA.Value == Value) return SA;
            if (SB.Value == Value) return SB;
            if (SC.Value == Value) return SC;
            if (SD.Value == Value) return SD;
            if (SE.Value == Value) return SE;
            if (SG.Value == Value) return SG;
            if (SH.Value == Value) return SH;
            if (SI.Value == Value) return SI;
            if (SJ.Value == Value) return SJ;
            if (SK.Value == Value) return SK;
            if (SL.Value == Value) return SL;
            if (SM.Value == Value) return SM;
            if (SN.Value == Value) return SN;
            if (SO.Value == Value) return SO;
            if (SR.Value == Value) return SR;
            if (SS.Value == Value) return SS;
            if (ST.Value == Value) return ST;
            if (SV.Value == Value) return SV;
            if (SX.Value == Value) return SX;
            if (SY.Value == Value) return SY;
            if (SZ.Value == Value) return SZ;
            if (TC.Value == Value) return TC;
            if (TD.Value == Value) return TD;
            if (TF.Value == Value) return TF;
            if (TG.Value == Value) return TG;
            if (TH.Value == Value) return TH;
            if (TJ.Value == Value) return TJ;
            if (TK.Value == Value) return TK;
            if (TL.Value == Value) return TL;
            if (TM.Value == Value) return TM;
            if (TN.Value == Value) return TN;
            if (TO.Value == Value) return TO;
            if (TR.Value == Value) return TR;
            if (TT.Value == Value) return TT;
            if (TV.Value == Value) return TV;
            if (TW.Value == Value) return TW;
            if (TZ.Value == Value) return TZ;
            if (UA.Value == Value) return UA;
            if (UG.Value == Value) return UG;
            if (UM.Value == Value) return UM;
            if (US.Value == Value) return US;
            if (UY.Value == Value) return UY;
            if (UZ.Value == Value) return UZ;
            if (VA.Value == Value) return VA;
            if (VC.Value == Value) return VC;
            if (VE.Value == Value) return VE;
            if (VG.Value == Value) return VG;
            if (VI.Value == Value) return VI;
            if (VN.Value == Value) return VN;
            if (VU.Value == Value) return VU;
            if (WF.Value == Value) return WF;
            if (WS.Value == Value) return WS;
            if (YE.Value == Value) return YE;
            if (YT.Value == Value) return YT;
            if (ZA.Value == Value) return ZA;
            if (ZM.Value == Value) return ZM;
            if (ZW.Value == Value) return ZW;

            throw new Exception("Unknown country value");
        }
    }
}